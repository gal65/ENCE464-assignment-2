--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         6291456 B, 64 B, 12-way associative
Command:          ./main -n 51 -i 300 -t 4
Data file:        cachegrind.out.22978
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   I1mr           ILmr           Dr                   D1mr                DLmr            Dw                  D1mw               DLmw            
--------------------------------------------------------------------------------
388,931,853 (100.0%) 1,642 (100.0%) 1,596 (100.0%) 178,254,756 (100.0%) 23,868,882 (100.0%) 18,296 (100.0%) 18,993,470 (100.0%) 6,465,860 (100.0%) 34,023 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   I1mr        ILmr        Dr                   D1mr                DLmr            Dw                  D1mw               DLmw             file:function
--------------------------------------------------------------------------------
216,237,248 (55.60%) 27 ( 1.64%) 27 ( 1.69%) 131,453,152 (73.74%) 18,610,694 (77.97%) 13,891 (75.92%) 12,466,280 (65.63%) 4,598,562 (71.12%) 13,905 (40.87%)  /home/liam/programming/ence464-assignment-2/main.c:worker
165,392,539 (42.52%) 50 ( 3.05%) 50 ( 3.13%)  45,419,711 (25.48%)  5,250,997 (22.00%)  2,680 (14.65%)  4,643,744 (24.45%) 1,849,754 (28.61%)  2,702 ( 7.94%)  /home/liam/programming/ence464-assignment-2/main.c:boundary_worker
  2,145,279 ( 0.55%) 79 ( 4.81%) 79 ( 4.95%)     427,230 ( 0.24%)         11 ( 0.00%)      9 ( 0.05%)    253,374 ( 1.33%)         4 ( 0.00%)      0           ???:__printf_fp_l
  1,061,215 ( 0.27%)  1 ( 0.06%)  1 ( 0.06%)           1 ( 0.00%)          1 ( 0.00%)      0           1,061,208 ( 5.59%)    16,581 ( 0.26%) 16,581 (48.73%)  ???:__memset_avx2_erms
    923,354 ( 0.24%) 38 ( 2.31%) 38 ( 2.38%)     223,686 ( 0.13%)         16 ( 0.00%)      7 ( 0.04%)    153,460 ( 0.81%)         0               0           ???:__vfprintf_internal
    709,590 ( 0.18%)  6 ( 0.37%)  6 ( 0.38%)     187,837 ( 0.11%)          0               0             104,357 ( 0.55%)         8 ( 0.00%)      8 ( 0.02%)  ???:_IO_file_overflow@@GLIBC_2.2.5
    406,734 ( 0.10%)  4 ( 0.24%)  4 ( 0.25%)     122,748 ( 0.07%)          0               0              61,374 ( 0.32%)         0               0           ???:hack_digit

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/liam/programming/ence464-assignment-2/main.c
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                  D1mr                DLmr            Dw                 D1mw               DLmw            

-- line 44 ----------------------------------------
         .          .          .                   .                   .               .                  .                  .               .               int n;
         .          .          .                   .                   .               .                  .                  .               .               int iterations;
         .          .          .                   .                   .               .                  .                  .               .               double delta_squared;
         .          .          .                   .                   .               .                  .                  .               .           } boundary_thread_args_t;
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .           pthread_barrier_t barrier;
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .           void* worker(void* vargs)
        40 ( 0.00%) 0          0                   0                   0               0                 24 ( 0.00%)         4 ( 0.00%)      4 ( 0.01%)  {
         .          .          .                   .                   .               .                  .                  .               .               thread_args_t* args = (thread_args_t*)vargs;
         4 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          4 ( 0.00%)          1 ( 0.00%)      0                  0                  0               0               double* curr = args->curr;
         8 ( 0.00%) 0          0                   4 ( 0.00%)          3 ( 0.00%)      0                  4 ( 0.00%)         0               0               double* next = args->next;
         8 ( 0.00%) 0          0                   4 ( 0.00%)          0               0                  4 ( 0.00%)         4 ( 0.00%)      4 ( 0.01%)      int n = args->n;
         .          .          .                   .                   .               .                  .                  .               .           
    14,412 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)      9,604 ( 0.01%)      4,114 ( 0.02%)      0              1,204 ( 0.01%)         0               0               for (int iter = 0; iter < args->iterations; iter++) {
 1,413,600 ( 0.36%) 7 ( 0.43%) 7 ( 0.44%)    990,900 ( 0.56%)     45,081 ( 0.19%)      0            188,400 ( 0.99%)       969 ( 0.01%)      0                   for (int k = args->k_start; k < args->k_end; k++) {
14,523,728 ( 3.73%) 5 ( 0.30%) 5 ( 0.31%) 10,878,004 ( 6.10%)          0               0             14,744 ( 0.08%)       985 ( 0.02%)     16 ( 0.05%)              for (int j = I_START; j < I_END; j++) {
33,133,800 ( 8.52%) 1 ( 0.06%) 1 ( 0.06%) 13,685,700 ( 7.68%)          0               0                  0                  0               0                           for (int i = I_START; i < I_END; i++) {
 2,196,900 ( 0.56%) 2 ( 0.12%) 2 ( 0.13%)    725,100 ( 0.41%)        243 ( 0.00%)      0             13,200 ( 0.07%)         0               0                               double source_term = args->delta_squared * args->source[IDX(n, i, j, k)];
19,448,108 ( 5.00%) 0          0             720,304 ( 0.40%)          4 ( 0.00%)      0          9,363,900 (49.30%) 4,595,400 (71.07%) 13,877 (40.79%)                      next[IDX(n, i, j, k)] = 1.0 / 6.0 *
 1,440,600 ( 0.37%) 1 ( 0.06%) 1 ( 0.06%)          0                   0               0                  0                  0               0                                                       (curr[IDX(n, i + LOOKAHEAD(i), j, k)] +
 5,042,100 ( 1.30%) 0          0           2,881,200 ( 1.62%)     90,000 ( 0.38%)      0                  0                  0               0                                                        curr[IDX(n, i + LOOKBEHIND(i), j, k)] +
43,938,300 (11.30%) 5 ( 0.30%) 5 ( 0.31%)  7,923,300 ( 4.44%)          0               0            720,300 ( 3.79%)         0               0                                                        curr[IDX(n, i, j + LOOKAHEAD(j), k)] +
 2,160,900 ( 0.56%) 0          0             720,300 ( 0.40%)          0               0                  0                  0               0                                                        curr[IDX(n, i, j + LOOKBEHIND(j), k)] +
 2,881,200 ( 0.74%) 1 ( 0.06%) 1 ( 0.06%)  1,440,600 ( 0.81%)     90,000 ( 0.38%)     14 ( 0.08%)         0                  0               0                                                        curr[IDX(n, i, j, k + LOOKAHEAD(k))] +
90,037,504 (23.15%) 2 ( 0.12%) 2 ( 0.13%) 91,478,100 (51.32%) 18,381,244 (77.01%) 13,877 (75.85%) 2,160,900 (11.38%)         0               0                                                        curr[IDX(n, i, j, k + LOOKBEHIND(k))] - source_term);
         .          .          .                   .                   .               .                  .                  .               .                           }
         .          .          .                   .                   .               .                  .                  .               .                       }
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .                   double* temp = curr;
         .          .          .                   .                   .               .                  .                  .               .                   curr = next;
         .          .          .                   .                   .               .                  .                  .               .                   next = temp;
     6,000 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0                   0               0              3,600 ( 0.02%)     1,200 ( 0.02%)      4 ( 0.01%)          pthread_barrier_wait(&barrier);
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .               return NULL;
        36 ( 0.00%) 0          0                  28 ( 0.00%)          4 ( 0.00%)      0                  0                  0               0           }
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .           /**
         .          .          .                   .                   .               .                  .                  .               .            * Do cell update while checking all boundary conditions
         .          .          .                   .                   .               .                  .                  .               .            */
         .          .          .                   .                   .               .                  .                  .               .           inline void do_cell(
         .          .          .                   .                   .               .                  .                  .               .               double* source, double* curr, double* next, double delta_squared, int n, int i, int j, int k)
         .          .          .                   .                   .               .                  .                  .               .           {
13,695,302 ( 3.52%) 2 ( 0.12%) 2 ( 0.13%)    749,700 ( 0.42%)     94,200 ( 0.39%)    138 ( 0.75%)         0                  0               0               int ip = (i == n - 1) ? -1 : 1;
10,708,800 ( 2.75%) 0          0           2,998,800 ( 1.68%)    215,100 ( 0.90%)    178 ( 0.97%)         0                  0               0               int in = (i == 0) ? -1 : 1;
 3,182,400 ( 0.82%) 0          0                   0                   0               0                  0                  0               0               int jp = (j == n - 1) ? -1 : 1;
 9,287,100 ( 2.39%) 1 ( 0.06%) 1 ( 0.06%)  1,545,300 ( 0.87%)          0               0                  0                  0               0               int jn = (j == 0) ? -1 : 1;
 1,530,000 ( 0.39%) 0          0                   0                   0               0                  0                  0               0               int kp = (k == n - 1) ? -1 : 1;
 2,295,000 ( 0.59%) 0          0             765,000 ( 0.43%)          0               0                  0                  0               0               int kn = (k == 0) ? -1 : 1;
         .          .          .                   .                   .               .                  .                  .               .           
   374,114 ( 0.10%) 3 ( 0.18%) 3 ( 0.19%)     89,400 ( 0.05%)          0               0             75,305 ( 0.40%)         1 ( 0.00%)      1 ( 0.00%)      double source_term = delta_squared * source[IDX(n, i, j, k)];
15,633,304 ( 4.02%) 1 ( 0.06%) 1 ( 0.06%)  5,191,502 ( 2.91%)  1,996,201 ( 8.36%)  1,283 ( 7.01%) 4,500,601 (23.70%) 1,849,200 (28.60%)  2,695 ( 7.92%)      next[IDX(n, i, j, k)] = 1.0 / 6.0 *
33,476,400 ( 8.61%) 4 ( 0.24%) 4 ( 0.25%)  9,748,500 ( 5.47%)  1,852,200 ( 7.76%)    424 ( 2.32%)         0                  0               0                                       (curr[IDX(n, i + ip, j, k)] + curr[IDX(n, i - in, j, k)] +
33,055,800 ( 8.50%) 4 ( 0.24%) 4 ( 0.25%) 14,509,800 ( 8.14%)  1,066,500 ( 4.47%)    651 ( 3.56%)         0                  0               0                                        curr[IDX(n, i, j + jp, k)] + curr[IDX(n, i, j - jn, k)] +
15,613,591 ( 4.01%) 9 ( 0.55%) 9 ( 0.56%)  2,429,100 ( 1.36%)      1,800 ( 0.01%)      6 ( 0.03%)    58,828 ( 0.31%)         3 ( 0.00%)      3 ( 0.01%)                               curr[IDX(n, i, j, k + kp)] + curr[IDX(n, i, j, k - kn)] - source_term);
         .          .          .                   .                   .               .                  .                  .               .           }
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .           void* boundary_worker(void* vargs)
         9 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0                   0               0                  6 ( 0.00%)         1 ( 0.00%)      1 ( 0.00%)  {
         .          .          .                   .                   .               .                  .                  .               .               boundary_thread_args_t* args = (boundary_thread_args_t*)vargs;
         1 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          1 ( 0.00%)          0               0                  0                  0               0               double* curr = args->curr;
         2 ( 0.00%) 0          0                   1 ( 0.00%)          1 ( 0.00%)      0                  1 ( 0.00%)         1 ( 0.00%)      1 ( 0.00%)      double* next = args->next;
         2 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  1 ( 0.00%)         0               0               int n = args->n;
         .          .          .                   .                   .               .                  .                  .               .           
     2,105 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)      1,201 ( 0.00%)        498 ( 0.00%)      0                301 ( 0.00%)         0               0               for (int iter = 0; iter < args->iterations; iter++) {
         .          .          .                   .                   .               .                  .                  .               .                   // top k-slice
   145,200 ( 0.04%) 4 ( 0.24%) 4 ( 0.25%)     65,098 ( 0.04%)        599 ( 0.00%)      0              1,201 ( 0.01%)         0               0                   for (int j = 0; j < n; j++) {
 3,151,800 ( 0.81%) 0          0             780,300 ( 0.44%)          0               0                  0                  0               0                       for (int i = 0; i < n; i++) {
 2,345,100 ( 0.60%) 3 ( 0.18%) 3 ( 0.19%)  1,561,800 ( 0.88%)        496 ( 0.00%)      0              1,800 ( 0.01%)       248 ( 0.00%)      0                           do_cell(args->source, curr, next, args->delta_squared, n, i, j, 0);
         .          .          .                   .                   .               .                  .                  .               .                       }
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .                   // bottom k-slice
   122,700 ( 0.03%) 2 ( 0.12%) 2 ( 0.13%)     61,500 ( 0.03%)          0               0                  0                  0               0                   for (int j = 0; j < n; j++) {
 3,151,800 ( 0.81%) 0          0             780,300 ( 0.44%)          0               0                  0                  0               0                       for (int i = 0; i < n; i++) {
 2,340,900 ( 0.60%) 0          0           1,560,600 ( 0.88%)          0               0                  0                  0               0                           do_cell(args->source, curr, next, args->delta_squared, n, i, j, n - 1);
         .          .          .                   .                   .               .                  .                  .               .                       }
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .                   // left j-slice
   138,000 ( 0.04%) 2 ( 0.12%) 2 ( 0.13%)     46,500 ( 0.03%)        900 ( 0.00%)      0                900 ( 0.00%)         0               0                   for (int k = 1; k < n - 1; k++) {
 2,984,100 ( 0.77%) 0          0             749,700 ( 0.42%)          0               0                  0                  0               0                       for (int i = 0; i < n; i++) {
         .          .          .                   .                   .               .                  .                  .               .                           do_cell(args->source, curr, next, args->delta_squared, n, i, 0, k);
         .          .          .                   .                   .               .                  .                  .               .                       }
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .                   // right j-slice
   132,900 ( 0.03%) 1 ( 0.06%) 1 ( 0.06%)     44,400 ( 0.02%)        300 ( 0.00%)      0                  0                  0               0                   for (int k = 1; k < n - 1; k++) {
 2,984,100 ( 0.77%) 0          0             749,700 ( 0.42%)          0               0                  0                  0               0                       for (int i = 0; i < n; i++) {
 1,499,400 ( 0.39%) 2 ( 0.12%) 2 ( 0.13%)    749,700 ( 0.42%)          0               0                  0                  0               0                           do_cell(args->source, curr, next, args->delta_squared, n, i, n - 1, k);
         .          .          .                   .                   .               .                  .                  .               .                       }
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .                   // front i-slice
   108,900 ( 0.03%) 3 ( 0.18%) 3 ( 0.19%)     76,500 ( 0.04%)      8,100 ( 0.03%)      0              2,100 ( 0.01%)         0               0                   for (int k = 1; k < n - 1; k++) {
 3,650,100 ( 0.94%) 2 ( 0.12%) 2 ( 0.13%)     31,200 ( 0.02%)        600 ( 0.00%)      0              1,800 ( 0.01%)         0               0                       for (int j = 1; j < n - 1; j++) {
     4,200 ( 0.00%) 2 ( 0.12%) 2 ( 0.13%)      1,500 ( 0.00%)        900 ( 0.00%)      0                600 ( 0.00%)         0               0                           do_cell(args->source, curr, next, args->delta_squared, n, 0, j, k);
         .          .          .                   .                   .               .                  .                  .               .                       }
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .                   // back i-slice
   132,900 ( 0.03%) 1 ( 0.06%) 1 ( 0.06%)    103,200 ( 0.06%)      9,600 ( 0.04%)      0                  0                  0               0                   for (int k = 1; k < n - 1; k++) {
 3,645,600 ( 0.94%) 0          0              29,400 ( 0.02%)      3,000 ( 0.01%)      0                  0                  0               0                       for (int j = 1; j < n - 1; j++) {
         .          .          .                   .                   .               .                  .                  .               .                           do_cell(args->source, curr, next, args->delta_squared, n, n - 1, j, k);
         .          .          .                   .                   .               .                  .                  .               .                       }
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .                   double* temp = curr;
         .          .          .                   .                   .               .                  .                  .               .                   curr = next;
         .          .          .                   .                   .               .                  .                  .               .                   next = temp;
       900 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0                   0               0                300 ( 0.00%)       300 ( 0.00%)      1 ( 0.00%)          pthread_barrier_wait(&barrier);
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .               return NULL;
         9 ( 0.00%) 0          0                   7 ( 0.00%)          2 ( 0.00%)      0                  0                  0               0           }
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .           double* poisson_neumann(int n, double* source, int iterations, int num_threads, float delta)
        18 ( 0.00%) 2 ( 0.12%) 2 ( 0.13%)          1 ( 0.00%)          1 ( 0.00%)      0                 11 ( 0.00%)         3 ( 0.00%)      0           {
         2 ( 0.00%) 0          0                   1 ( 0.00%)          1 ( 0.00%)      1 ( 0.01%)         0                  0               0               if (debug) {
         .          .          .                   .                   .               .                  .                  .               .                   printf(
         .          .          .                   .                   .               .                  .                  .               .                       "Starting solver with:\n"
         .          .          .                   .                   .               .                  .                  .               .                       "n = %i\n"
         .          .          .                   .                   .               .                  .                  .               .                       "iterations = %i\n"
         .          .          .                   .                   .               .                  .                  .               .                       "num_threads = %i\n"
         .          .          .                   .                   .               .                  .                  .               .                       "delta = %f\n",
         .          .          .                   .                   .               .                  .                  .               .                       n,
         .          .          .                   .                   .               .                  .                  .               .                       iterations,
         .          .          .                   .                   .               .                  .                  .               .                       num_threads,
         .          .          .                   .                   .               .                  .                  .               .                       delta);
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .               // Allocate some buffers to calculate the solution in
        12 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          1 ( 0.00%)          0               0                  3 ( 0.00%)         0               0               double* curr = (double*)calloc(n * n * n, sizeof(double));
         5 ( 0.00%) 0          0                   0                   0               0                  1 ( 0.00%)         0               0               double* next = (double*)calloc(n * n * n, sizeof(double));
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .               // Ensure we haven't run out of memory
         4 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0                   0               0                  0                  0               0               if (curr == NULL || next == NULL) {
         .          .          .                   .                   .               .                  .                  .               .                   fprintf(stderr, "Error: ran out of memory when trying to allocate %i sized cube\n", n);
         .          .          .                   .                   .               .                  .                  .               .                   exit(EXIT_FAILURE);
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .           
         4 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  2 ( 0.00%)         0               0               pthread_t* threads = (pthread_t*)malloc(num_threads * sizeof(pthread_t));
         4 ( 0.00%) 0          0                   0                   0               0                  2 ( 0.00%)         0               0               thread_args_t* thread_args = (thread_args_t*)malloc(num_threads * sizeof(thread_args_t));
         4 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  1 ( 0.00%)         0               0               double delta_squared = delta * delta;
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .           #ifdef BOUNDARY_THREAD
         .          .          .                   .                   .               .                  .                  .               .               // Init the boundary thread if enabled
         4 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0                   0               0                  1 ( 0.00%)         0               0               pthread_barrier_init(&barrier, NULL, num_threads + 1);
         6 ( 0.00%) 0          0                   2 ( 0.00%)          0               0                  4 ( 0.00%)         0               0               boundary_thread_args_t args = {
         .          .          .                   .                   .               .                  .                  .               .                   .source = source,
         .          .          .                   .                   .               .                  .                  .               .                   .curr = curr,
         .          .          .                   .                   .               .                  .                  .               .                   .next = next,
         .          .          .                   .                   .               .                  .                  .               .                   .n = n,
         .          .          .                   .                   .               .                  .                  .               .                   .iterations = iterations,
         .          .          .                   .                   .               .                  .                  .               .                   .delta_squared = delta_squared};
         .          .          .                   .                   .               .                  .                  .               .               pthread_t boundary_thread;
         5 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0                   0               0                  1 ( 0.00%)         0               0               pthread_create(&boundary_thread, NULL, &boundary_worker, &args);
         .          .          .                   .                   .               .                  .                  .               .           #else
         .          .          .                   .                   .               .                  .                  .               .               pthread_barrier_init(&barrier, NULL, num_threads);
         .          .          .                   .                   .               .                  .                  .               .           #endif
         .          .          .                   .                   .               .                  .                  .               .           
        26 ( 0.00%) 0          0                   4 ( 0.00%)          0               0                  0                  0               0               for (int thread_idx = 0; thread_idx < num_threads; thread_idx++) {
         6 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  2 ( 0.00%)         0               0                   int block_size = n / num_threads;
         8 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          4 ( 0.00%)          0               0                  0                  0               0                   int k_start = thread_idx * block_size;
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .                   // if the last thread, it's block should go all the way to the end of the array
        23 ( 0.00%) 2 ( 0.12%) 2 ( 0.13%)          3 ( 0.00%)          0               0                  0                  0               0                   int k_end = thread_idx == num_threads - 1 ? n : (thread_idx + 1) * block_size;
         .          .          .                   .                   .               .                  .                  .               .           #ifdef BOUNDARY_THREAD
         .          .          .                   .                   .               .                  .                  .               .                   // If using boundary thread, the main threads should not touch the boundaries of k
         8 ( 0.00%) 0          0                   0                   0               0                  0                  0               0                   if (thread_idx == 0) {
         3 ( 0.00%) 0          0                   0                   0               0                  0                  0               0                       k_start = 1;
         .          .          .                   .                   .               .                  .                  .               .                   }
         6 ( 0.00%) 0          0                   0                   0               0                  0                  0               0                   if (thread_idx == num_threads - 1) {
         9 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          3 ( 0.00%)          0               0                  0                  0               0                       k_end = n - 1;
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .           #endif
         .          .          .                   .                   .               .                  .                  .               .           
        40 ( 0.00%) 0          0                  16 ( 0.00%)          0               0                 16 ( 0.00%)         2 ( 0.00%)      2 ( 0.01%)          thread_args[thread_idx] = (thread_args_t){
         .          .          .                   .                   .               .                  .                  .               .                       .source = source,
         .          .          .                   .                   .               .                  .                  .               .                       .curr = curr,
         .          .          .                   .                   .               .                  .                  .               .                       .next = next,
         .          .          .                   .                   .               .                  .                  .               .                       .n = n,
         .          .          .                   .                   .               .                  .                  .               .                       .k_start = k_start,
         .          .          .                   .                   .               .                  .                  .               .                       .k_end = k_end,
         .          .          .                   .                   .               .                  .                  .               .                       .iterations = iterations,
         .          .          .                   .                   .               .                  .                  .               .                       .delta_squared = delta_squared};
         .          .          .                   .                   .               .                  .                  .               .           
        20 ( 0.00%) 0          0                   0                   0               0                  4 ( 0.00%)         0               0                   pthread_create(&threads[thread_idx], NULL, &worker, &thread_args[thread_idx]);
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .           
        12 ( 0.00%) 0          0                   0                   0               0                  0                  0               0               for (int thread_idx = 0; thread_idx < num_threads; thread_idx++) {
        12 ( 0.00%) 0          0                   4 ( 0.00%)          1 ( 0.00%)      0                  4 ( 0.00%)         0               0                   pthread_join(threads[thread_idx], NULL);
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .           #ifdef BOUNDARY_THREAD
         3 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  1 ( 0.00%)         0               0               pthread_join(boundary_thread, NULL);
         .          .          .                   .                   .               .                  .                  .               .           #endif
         .          .          .                   .                   .               .                  .                  .               .           
         2 ( 0.00%) 0          0                   1 ( 0.00%)          1 ( 0.00%)      0                  0                  0               0               if (iterations % 2 != 0) {
         .          .          .                   .                   .               .                  .                  .               .                   double* temp = curr;
         .          .          .                   .                   .               .                  .                  .               .                   curr = next;
         .          .          .                   .                   .               .                  .                  .               .                   next = temp;
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .           
         2 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0                   0               0                  1 ( 0.00%)         0               0               free(next);
         2 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  1 ( 0.00%)         0               0               free(threads);
         2 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  1 ( 0.00%)         0               0               free(thread_args);
         .          .          .                   .                   .               .                  .                  .               .           
         2 ( 0.00%) 0          0                   1 ( 0.00%)          1 ( 0.00%)      0                  0                  0               0               if (debug) {
         .          .          .                   .                   .               .                  .                  .               .                   printf("Finished solving.\n");
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .               return curr;
        12 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)         10 ( 0.00%)          1 ( 0.00%)      0                  0                  0               0           }
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .           int main(int argc, char** argv)
         8 ( 0.00%) 2 ( 0.12%) 2 ( 0.13%)          0                   0               0                  7 ( 0.00%)         0               0           {
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .               // default settings for solver
        52 ( 0.00%) 0          0                  51 ( 0.00%)          0               0                  1 ( 0.00%)         0               0               int iterations = 10;
         1 ( 0.00%) 0          0                   0                   0               0                  1 ( 0.00%)         0               0               int n = 5;
         1 ( 0.00%) 0          0                   0                   0               0                  1 ( 0.00%)         0               0               int threads = 1;
         .          .          .                   .                   .               .                  .                  .               .               float delta = 1;
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .               // parse the command line arguments
        14 ( 0.00%) 0          0                   3 ( 0.00%)          0               0                  0                  0               0               for (int i = 1; i < argc; ++i) {
        40 ( 0.00%) 3 ( 0.18%) 3 ( 0.19%)          9 ( 0.00%)          0               0                  3 ( 0.00%)         0               0                   if (strcmp(argv[i], "-h") == 0 || strcmp(argv[i], "--help") == 0) {
         .          .          .                   .                   .               .                  .                  .               .                       printf("usage: poisson [-n size] [-i iterations] [-t threads] "
         .          .          .                   .                   .               .                  .                  .               .                              "[--debug]\n");
         .          .          .                   .                   .               .                  .                  .               .                       return EXIT_SUCCESS;
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .           
        14 ( 0.00%) 0          0                   4 ( 0.00%)          0               0                  0                  0               0                   if (strcmp(argv[i], "-n") == 0) {
         5 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  1 ( 0.00%)         0               0                       if (i == argc - 1) {
         .          .          .                   .                   .               .                  .                  .               .                           fprintf(stderr, "Error: expected size after -n!\n");
         .          .          .                   .                   .               .                  .                  .               .                           return EXIT_FAILURE;
         .          .          .                   .                   .               .                  .                  .               .                       }
         .          .          .                   .                   .               .                  .                  .               .           
         2 ( 0.00%) 0          0                   0                   0               0                  0                  0               0                       n = atoi(argv[++i]);
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .           
        13 ( 0.00%) 0          0                   7 ( 0.00%)          0               0                  0                  0               0                   if (strcmp(argv[i], "-i") == 0) {
         2 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  0                  0               0                       if (i == argc - 1) {
         .          .          .                   .                   .               .                  .                  .               .                           fprintf(stderr, "Error: expected iterations after -i!\n");
         .          .          .                   .                   .               .                  .                  .               .                           return EXIT_FAILURE;
         .          .          .                   .                   .               .                  .                  .               .                       }
         .          .          .                   .                   .               .                  .                  .               .           
         3 ( 0.00%) 0          0                   0                   0               0                  0                  0               0                       iterations = atoi(argv[++i]);
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .           
        11 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          6 ( 0.00%)          0               0                  0                  0               0                   if (strcmp(argv[i], "-t") == 0) {
         2 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  0                  0               0                       if (i == argc - 1) {
         .          .          .                   .                   .               .                  .                  .               .                           fprintf(stderr, "Error: expected threads after -t!\n");
         .          .          .                   .                   .               .                  .                  .               .                           return EXIT_FAILURE;
         .          .          .                   .                   .               .                  .                  .               .                       }
         .          .          .                   .                   .               .                  .                  .               .           
         3 ( 0.00%) 0          0                   0                   0               0                  0                  0               0                       threads = atoi(argv[++i]);
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .           
        16 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  3 ( 0.00%)         0               0                   if (strcmp(argv[i], "--debug") == 0) {
         .          .          .                   .                   .               .                  .                  .               .                       debug = true;
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .               // ensure we have an odd sized cube
         2 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          1 ( 0.00%)          0               0                  0                  0               0               if (n % 2 == 0) {
         .          .          .                   .                   .               .                  .                  .               .                   fprintf(stderr, "Error: n should be an odd number!\n");
         .          .          .                   .                   .               .                  .                  .               .                   return EXIT_FAILURE;
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .               // Create a source term with a single point in the centre
         8 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  1 ( 0.00%)         0               0               double* source = (double*)calloc(n * n * n, sizeof(double));
         2 ( 0.00%) 0          0                   0                   0               0                  0                  0               0               if (source == NULL) {
         .          .          .                   .                   .               .                  .                  .               .                   fprintf(stderr, "Error: failed to allocated source term (n=%i)\n", n);
         .          .          .                   .                   .               .                  .                  .               .                   return EXIT_FAILURE;
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .           
         7 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          1 ( 0.00%)          0               0                  1 ( 0.00%)         1 ( 0.00%)      0               source[(n * n * n) / 2] = 1;
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .               // Calculate the resulting field with Neumann conditions
         9 ( 0.00%) 0          0                   4 ( 0.00%)          2 ( 0.00%)      1 ( 0.01%)         2 ( 0.00%)         1 ( 0.00%)      0               double* result = poisson_neumann(n, source, iterations, threads, delta);
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .               // Print out the middle slice of the cube for validation
       359 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)        102 ( 0.00%)          0               0                  0                  0               0               for (int x = 0; x < n; ++x) {
    13,107 ( 0.00%) 0          0               2,601 ( 0.00%)          0               0                  0                  0               0                   for (int y = 0; y < n; ++y) {
    10,415 ( 0.00%) 2 ( 0.12%) 2 ( 0.13%)      2,601 ( 0.00%)        327 ( 0.00%)      0              2,602 ( 0.01%)         0               0                       printf("%0.5f ", result[((n / 2) * n + y) * n + x]);
         .          .          .                   .                   .               .                  .                  .               .                   }
       153 ( 0.00%) 0          0                   0                   0               0                102 ( 0.00%)         0               0                   printf("\n");
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .           
         .          .          .                   .                   .               .                  .                  .               .           /* #define SECOND_SLICE */
         .          .          .                   .                   .               .                  .                  .               .           #ifdef SECOND_SLICE
         .          .          .                   .                   .               .                  .                  .               .               printf("\n");
         .          .          .                   .                   .               .                  .                  .               .               for (int x = 0; x < n; ++x) {
         .          .          .                   .                   .               .                  .                  .               .                   for (int y = 0; y < n; ++y) {
         .          .          .                   .                   .               .                  .                  .               .                       printf("%0.5f ", result[((n / 2 + 1) * n + y) * n + x]);
         .          .          .                   .                   .               .                  .                  .               .                   }
         .          .          .                   .                   .               .                  .                  .               .                   printf("\n");
         .          .          .                   .                   .               .                  .                  .               .               }
         .          .          .                   .                   .               .                  .                  .               .           #endif
         .          .          .                   .                   .               .                  .                  .               .           
         2 ( 0.00%) 0          0                   0                   0               0                  1 ( 0.00%)         0               0               free(source);
         2 ( 0.00%) 0          0                   1 ( 0.00%)          0               0                  1 ( 0.00%)         0               0               free(result);
         .          .          .                   .                   .               .                  .                  .               .           
         2 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)          0                   0               0                  0                  0               0               return EXIT_SUCCESS;
         8 ( 0.00%) 2 ( 0.12%) 0                   7 ( 0.00%)          1 ( 0.00%)      0                  0                  0               0           }

--------------------------------------------------------------------------------
Ir                   I1mr         ILmr         Dr                   D1mr                DLmr            Dw                  D1mw               DLmw            
--------------------------------------------------------------------------------
381,654,316 (98.13%) 103 ( 6.27%) 101 ( 6.33%) 176,878,323 (99.23%) 23,862,027 (99.97%) 16,573 (90.58%) 17,112,807 (90.10%) 6,448,323 (99.73%) 16,609 (48.82%)  events annotated

